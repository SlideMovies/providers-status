/*GENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.*/


import {ANIME, BOOKS, MANGA, COMICS, LIGHT_NOVELS} from '@consumet/extensions'
import fs from "fs"
import {performance} from "perf_hooks"

const start = async() => {
 let output = '| **provider** | **Status** | **Time** |\n|:--------:|:------:|:----:|\n'
 let t0, t1 = performance.now()
	const NineAnime = new ANIME.NineAnime()
 try {
	t0 = performance.now()
	 const NineAnimeRes = await NineAnime.search("One Piece")
	 t1 = performance.now()
	if (NineAnimeRes.results){
		 output += `| [${NineAnime.name}](https://9anime.to) | 游릭 200 | ${((t1 - t0) / 1000).toPrecision(3)}s |\n`
	}
	else {
		 output += `| [${NineAnime.name}](https://9anime.to) | 游댮 500 | ${((t1 - t0) / 1000).toPrecision(3)}s |\n`
	}
} catch (e) {
	 output += `| [${NineAnime.name}](https://9anime.to) | 游댮 500 | 0s |\n`
	}
	const Gogoanime = new ANIME.Gogoanime()
 try {
	t0 = performance.now()
	 const GogoanimeRes = await Gogoanime.search("One Piece")
	 t1 = performance.now()
	if (GogoanimeRes.results){
		 output += `| [${Gogoanime.name}](https://gogoanime.gg) | 游릭 200 | ${((t1 - t0) / 1000).toPrecision(3)}s |\n`
	}
	else {
		 output += `| [${Gogoanime.name}](https://gogoanime.gg) | 游댮 500 | ${((t1 - t0) / 1000).toPrecision(3)}s |\n`
	}
} catch (e) {
	 output += `| [${Gogoanime.name}](https://gogoanime.gg) | 游댮 500 | 0s |\n`
	}
	const MangaDex = new MANGA.MangaDex()
 try {
	t0 = performance.now()
	 const MangaDexRes = await MangaDex.search("One Piece")
	 t1 = performance.now()
	if (MangaDexRes.results){
		 output += `| [${MangaDex.name}](https://mangadex.org) | 游릭 200 | ${((t1 - t0) / 1000).toPrecision(3)}s |\n`
	}
	else {
		 output += `| [${MangaDex.name}](https://mangadex.org) | 游댮 500 | ${((t1 - t0) / 1000).toPrecision(3)}s |\n`
	}
} catch (e) {
	 output += `| [${MangaDex.name}](https://mangadex.org) | 游댮 500 | 0s |\n`
	}
	const Libgen = new BOOKS.Libgen()
 try {
	t0 = performance.now()
	 const LibgenRes = await Libgen.search("One Hundred Years of Solitude")
	 t1 = performance.now()
	if (LibgenRes){
		 output += `| [${Libgen.name}](http://libgen) | 游릭 200 | ${((t1 - t0) / 1000).toPrecision(3)}s |\n`
	}
	else {
		 output += `| [${Libgen.name}](http://libgen) | 游댮 500 | ${((t1 - t0) / 1000).toPrecision(3)}s |\n`
	}
} catch (e) {
	 output += `| [${Libgen.name}](http://libgen) | 游댮 500 | 0s |\n`
	}
	const GetComics = new COMICS.GetComics()
 try {
	t0 = performance.now()
	 const GetComicsRes = await GetComics.search("batman")
	 t1 = performance.now()
	if (GetComicsRes.containers){
		 output += `| [${GetComics.name}](https://getcomics.info/) | 游릭 200 | ${((t1 - t0) / 1000).toPrecision(3)}s |\n`
	}
	else {
		 output += `| [${GetComics.name}](https://getcomics.info/) | 游댮 500 | ${((t1 - t0) / 1000).toPrecision(3)}s |\n`
	}
} catch (e) {
	 output += `| [${GetComics.name}](https://getcomics.info/) | 游댮 500 | 0s |\n`
	}
	const ReadLightNovels = new LIGHT_NOVELS.ReadLightNovels()
 try {
	t0 = performance.now()
	 const ReadLightNovelsRes = await ReadLightNovels.search("One Piece")
	 t1 = performance.now()
	if (ReadLightNovelsRes.results){
		 output += `| [${ReadLightNovels.name}](https://readlightnovels.net) | 游릭 200 | ${((t1 - t0) / 1000).toPrecision(3)}s |\n`
	}
	else {
		 output += `| [${ReadLightNovels.name}](https://readlightnovels.net) | 游댮 500 | ${((t1 - t0) / 1000).toPrecision(3)}s |\n`
	}
} catch (e) {
	 output += `| [${ReadLightNovels.name}](https://readlightnovels.net) | 游댮 500 | 0s |\n`
	}
fs.writeFileSync('./README.md', output)}



start()